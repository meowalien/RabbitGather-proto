// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: interest/interest.proto

package interest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InterestCrawler_Crawl_FullMethodName = "/interest.InterestCrawler/Crawl"
)

// InterestCrawlerClient is the client API for InterestCrawler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterestCrawlerClient interface {
	Crawl(ctx context.Context, in *CrawlRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type interestCrawlerClient struct {
	cc grpc.ClientConnInterface
}

func NewInterestCrawlerClient(cc grpc.ClientConnInterface) InterestCrawlerClient {
	return &interestCrawlerClient{cc}
}

func (c *interestCrawlerClient) Crawl(ctx context.Context, in *CrawlRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InterestCrawler_Crawl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterestCrawlerServer is the server API for InterestCrawler service.
// All implementations must embed UnimplementedInterestCrawlerServer
// for forward compatibility
type InterestCrawlerServer interface {
	Crawl(context.Context, *CrawlRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedInterestCrawlerServer()
}

// UnimplementedInterestCrawlerServer must be embedded to have forward compatible implementations.
type UnimplementedInterestCrawlerServer struct {
}

func (UnimplementedInterestCrawlerServer) Crawl(context.Context, *CrawlRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Crawl not implemented")
}
func (UnimplementedInterestCrawlerServer) mustEmbedUnimplementedInterestCrawlerServer() {}

// UnsafeInterestCrawlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterestCrawlerServer will
// result in compilation errors.
type UnsafeInterestCrawlerServer interface {
	mustEmbedUnimplementedInterestCrawlerServer()
}

func RegisterInterestCrawlerServer(s grpc.ServiceRegistrar, srv InterestCrawlerServer) {
	s.RegisterService(&InterestCrawler_ServiceDesc, srv)
}

func _InterestCrawler_Crawl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterestCrawlerServer).Crawl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterestCrawler_Crawl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterestCrawlerServer).Crawl(ctx, req.(*CrawlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InterestCrawler_ServiceDesc is the grpc.ServiceDesc for InterestCrawler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterestCrawler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "interest.InterestCrawler",
	HandlerType: (*InterestCrawlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Crawl",
			Handler:    _InterestCrawler_Crawl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interest/interest.proto",
}
